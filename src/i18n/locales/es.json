{
  "nav": {
    "home": "Inicio",
    "learning": "Aprendizaje",
    "examples": "Ejemplos",
    "resources": "Recursos",
    "about": "Acerca de",
    "contact": "Contacto"
  },
  "hero": {
    "title": "Aprende VHDL",
    "subtitle": "Domina el lenguaje de descripci√≥n de hardware de forma intuitiva y pr√°ctica",
    "description": "Desde lo b√°sico hasta los conceptos avanzados, aprende VHDL con ejemplos reales y explicaciones claras que hacen que el dise√±o de hardware sea accesible para todos.",
    "cta": {
      "start": "Empezar Ahora",
      "examples": "Ver Ejemplos"
    }
  },
  "learning": {
    "intro": {
      "title": "Introducci√≥n a VHDL",
      "subtitle": "Comienza tu viaje entendiendo qu√© es VHDL, su origen y principales caracter√≠sticas"
    },
    "fundamentals": {
      "title": "Conceptos Fundamentales",
      "subtitle": "Domina los pilares de VHDL a trav√©s de explicaciones claras y ejemplos pr√°cticos"
    },
    "examples": {
      "title": "Ejemplos Pr√°cticos",
      "subtitle": "C√≥digo VHDL real que puedes ejecutar y modificar"
    },
    "concepts": {
      "whatIs": {
        "title": "¬øQu√© es VHDL?",
        "description": "VHDL (VHSIC Hardware Description Language) es un lenguaje de descripci√≥n de hardware utilizado para modelar sistemas electr√≥nicos digitales."
      },
      "history": {
        "title": "Historia",
        "description": "Desarrollado en los a√±os 80 por el Departamento de Defensa de EE. UU., ahora es el est√°ndar IEEE 1076."
      },
      "features": {
        "title": "Caracter√≠sticas",
        "description": "Fuertemente tipado, soporta concurrencia, permite simulaci√≥n y s√≠ntesis de circuitos digitales."
      },
      "entities": {
        "title": "Entidades y Arquitecturas",
        "description": "La entidad define la interfaz (puertos de entrada/salida) y la arquitectura describe el comportamiento interno del circuito."
      },
      "signals": {
        "title": "Se√±ales y Variables",
        "description": "Las se√±ales representan conexiones f√≠sicas entre componentes, mientras que las variables se utilizan para c√°lculos temporales dentro de procesos."
      },
      "processes": {
        "title": "Procesos y Reloj",
        "description": "Los procesos son bloques secuenciales que se ejecutan cuando las se√±ales en la lista de sensibilidad cambian, esenciales para la l√≥gica s√≠ncrona."
      },
      "dataTypes": {
        "title": "Tipos de Datos",
        "description": "VHDL posee tipos nativos (std_logic, integer, boolean) y permite la creaci√≥n de tipos personalizados para representar estados y estructuras."
      },
      "stateMachines": {
        "title": "M√°quinas de Estado",
        "description": "Las FSMs (Finite State Machines) son fundamentales para el control secuencial, implementadas con procesos y tipos enumerados."
      },
      "hierarchy": {
        "title": "Jerarqu√≠a y Componentes",
        "description": "Los proyectos complejos se dividen en componentes m√°s peque√±os, creando una jerarqu√≠a modular y reutilizable."
      }
    }
  },
  "basicExercises": {
    "title": "Ejercicios B√°sicos de VHDL",
    "subtitle": "¬°Empieza desde cero! Aprende los componentes fundamentales de la l√≥gica digital.",
    "progress": "Progreso",
    "verify": "Verificar C√≥digo",
    "next": "Siguiente",
    "previous": "Anterior",
    "showHint": "Ver Pista",
    "hideHint": "Ocultar Pista",
    "completed": "¬°Felicidades! üéâ",
    "completedMessage": "¬°Has completado todos los ejercicios b√°sicos! Ahora est√°s listo para desaf√≠os m√°s avanzados.",
    "instructions": "Instrucciones",
    "truthTable": "Tabla de Verdad",
    "inputs": "Entradas",
    "outputs": "Salida",
    "yourCode": "Tu c√≥digo VHDL:",
    "placeholder": "Escribe tu c√≥digo VHDL aqu√≠...",
    "exerciseOf": "Ejercicio {{current}} de {{total}}",
    "hint": "Pista",
    "feedback": {
      "error": "El c√≥digo a√∫n no es correcto. Revisa las instrucciones e int√©ntalo de nuevo."
    },
    "exercises": {
      "andGate": {
        "title": "Puerta AND (Y)",
        "description": "Crea una puerta l√≥gica AND de 2 entradas. La salida solo es '1' cuando AMBAS entradas son '1'.",
        "instructions": [
          "Crea una entidad llamada 'puerta_and' con 2 entradas (a, b) y 1 salida (y)",
          "Usa el operador 'and' para combinar las entradas: y <= a and b;"
        ],
        "hint": "La puerta AND usa el operador 'and'. Recuerda: entity nombre is Port(...); end nombre; despu√©s architecture...",
        "successMessage": "¬°Perfecto! ¬°Creaste tu primera puerta l√≥gica en VHDL!",
        "initialCode": "-- Completa el c√≥digo de la puerta AND\nentity puerta_and is\n  Port (\n    -- Declara las entradas a, b\n    -- Declara la salida y\n  );\nend puerta_and;\n\narchitecture behavioral of puerta_and is\nbegin\n  -- Implementa: y <= a and b;\nend behavioral;"
      },
      "orGate": {
        "title": "Puerta OR (O)",
        "description": "Crea una puerta l√≥gica OR de 2 entradas. La salida es '1' cuando AL MENOS UNA entrada es '1'.",
        "instructions": [
          "Crea una entidad llamada 'puerta_or' con 2 entradas (a, b) y 1 salida (y)",
          "Usa el operador 'or' para combinar las entradas"
        ],
        "hint": "Similar a la puerta AND, pero usa el operador 'or' en lugar de 'and'.",
        "successMessage": "¬°Excelente! ¬°La puerta OR est√° funcionando correctamente!",
        "initialCode": "-- Completa el c√≥digo de la puerta OR\nentity puerta_or is\n  Port (\n    a : in std_logic;\n    b : in std_logic;\n    -- Declara la salida y\n  );\nend porta_or;\n\narchitecture behavioral of porta_or is\nbegin\n  -- Implementa usando el operador 'or'\nend behavioral;"
      },
      "notGate": {
        "title": "Puerta NOT (Inversor)",
        "description": "Crea una puerta l√≥gica NOT. La salida es siempre la INVERSA de la entrada.",
        "instructions": [
          "Crea una entidad llamada 'puerta_not' con 1 entrada (a) y 1 salida (y)",
          "Usa el operador 'not' para invertir la entrada"
        ],
        "hint": "El operador NOT se usa as√≠: y <= not a;",
        "successMessage": "¬°Gran trabajo! ¬°Has dominado el operador NOT!",
        "initialCode": "-- Completa el c√≥digo de la puerta NOT\nentity puerta_not is\n  Port (\n    -- Declara la entrada y la salida\n  );\nend porta_not;\n\narchitecture behavioral of porta_not is\nbegin\n  -- Invierte la entrada\nend behavioral;"
      },
      "mux": {
        "title": "Multiplexor 2:1",
        "description": "Crea un multiplexor que selecciona entre 2 entradas basado en una se√±al de selecci√≥n.",
        "instructions": [
          "Crea una entidad con 2 entradas de datos (a, b), 1 selector (sel) y 1 salida (y)",
          "Usa una expresi√≥n condicional: y <= a when sel='0' else b;",
          "Cuando sel=0, la salida y recibe 'a'. Cuando sel=1, y recibe 'b'"
        ],
        "hint": "Usa la estructura: salida <= entrada1 when condicion else entrada2;",
        "successMessage": "¬°Fant√°stico! ¬°Creaste un multiplexor funcional!",
        "initialCode": "-- Completa el c√≥digo del multiplexor 2:1\nentity mux_2to1 is\n  Port (\n    a   : in std_logic;\n    b   : in std_logic;\n    sel : in std_logic;\n    y   : out std_logic\n  );\nend mux_2to1;\n\narchitecture behavioral of mux_2to1 is\nbegin\n  -- Implementa la l√≥gica de selecci√≥n\n  -- y <= a when sel='0' else b;\nend behavioral;"
      }
    }
  },
  "quiz": {
    "title": "Cuestionario Interactivo de VHDL",
    "subtitle": "¬°Prueba tus conocimientos con feedback inmediato!",
    "progress": "Progreso",
    "score": "Puntuaci√≥n",
    "question": "Pregunta",
    "of": "de",
    "verify": "Verificar Respuesta",
    "next": "Siguiente",
    "previous": "Anterior",
    "finish": "Ver Resultado",
    "restart": "Reiniciar Cuestionario",
    "completed": "¬°Cuestionario Completado! üéâ",
    "selectAnswer": "Selecciona una respuesta",
    "selectPrompt": "Por favor, elige una opci√≥n antes de verificar.",
    "resultMessage": "¬°Acertaste el {{percentage}}% de las preguntas!",
    "difficulty": {
      "easy": "F√°cil",
      "medium": "Medio",
      "hard": "Dif√≠cil"
    },
    "evaluation": {
      "excellent": "¬°Excelente! ¬°Dominas VHDL! üåü",
      "veryGood": "¬°Muy bien! ¬°Sigue practicando! üëç",
      "good": "¬°Buen comienzo! Revisa los conceptos. üìö",
      "keepGoing": "¬°Sigue estudiando! ¬°Lo conseguir√°s! üí™"
    },
    "feedback": {
      "correct": "¬°Correcto! üéâ",
      "incorrect": "Incorrecto",
      "explanation": "Evaluaci√≥n:"
    }
  },
  "intermediateExercises": {
    "title": "Ejercicios Intermedios",
    "subtitle": "Circuitos aritm√©ticos y secuenciales para dominar VHDL.",
    "progress": "Progreso",
    "verify": "Verificar C√≥digo",
    "showHint": "Ver Pista",
    "hideHint": "Ocultar Pista",
    "completed": "¬°Nivel Intermedio Completo! üéâ",
    "completedMessage": "¬°Est√°s dominando VHDL! Contin√∫a practicando con proyectos m√°s avanzados.",
    "instructions": "Instrucciones",
    "conceptsApplied": "Conceptos Aplicados",
    "yourCode": "Tu c√≥digo VHDL:",
    "placeholder": "Escribe tu c√≥digo VHDL aqu√≠...",
    "exerciseOf": "Ejercicio {{current}} de {{total}}",
    "hint": "Pista",
    "next": "Siguiente",
    "previous": "Anterior",
    "feedback": {
      "error": "El c√≥digo a√∫n no est√° completo. Revisa las instrucciones e int√©ntalo de nuevo."
    },
    "exercises": {
      "halfAdder": {
        "title": "Half Adder (Medio Sumador)",
        "description": "Circuito que suma dos bits, generando la suma (S) y el 'acarreo de salida' (carry out - C).",
        "instructions": [
          "Crea una entidad 'half_adder' con entradas 'a' y 'b', salidas 's' (suma) y 'c' (acarreo)",
          "La suma es: s <= a xor b;",
          "El acarreo es: c <= a and b;"
        ],
        "hint": "Usa el operador XOR para la suma y AND para el acarreo. Recuerda: 1+1 = 10 en binario (suma=0, acarreo=1).",
        "successMessage": "¬°Excelente! ¬°El Half Adder es la base para sumadores m√°s complejos!",
        "concepts": ["Aritm√©tica binaria", "Operador XOR", "Bit de acarreo"]
      },
      "fullAdder": {
        "title": "Full Adder (Sumador Completo)",
        "description": "Suma tres bits: a, b y carry_in, produciendo suma y carry_out. Base para sumadores de m√∫ltiples bits.",
        "instructions": [
          "Crea una entidad 'full_adder' con entradas a, b, carry_in y salidas s, carry_out",
          "Suma: s <= a xor b xor carry_in;",
          "Acarreo de salida: carry_out <= (a and b) or (carry_in and (a xor b));"
        ],
        "hint": "El Full Adder se puede construir con dos Half Adders. La f√≥rmula del carry_out combina m√∫ltiples condiciones con OR.",
        "successMessage": "¬°Perfecto! ¬°Los Full Adders se encadenan para crear sumadores de 8, 16, 32 bits!",
        "concepts": ["Sumadores en cascada", "Propagaci√≥n de acarreo", "Circuitos aritm√©ticos"]
      },
      "decoder2to4": {
        "title": "Decodificador 2 a 4",
        "description": "Convierte 2 bits de entrada en 4 salidas, donde solo una salida es '1' a la vez.",
        "instructions": [
          "Crea una entidad 'decoder_2to4' con entrada de 2 bits (sel) y salida de 4 bits (y)",
          "Usa un process con case-when para mapear cada combinaci√≥n de entrada",
          "Cuando sel='00', y='0001'; sel='01', y='0010'; sel='10', y='0100'; sel='11', y='1000'"
        ],
        "hint": "Usa case sel is ... when '00' => y <= '0001'; ... end case; dentro de un process.",
        "successMessage": "¬°Genial! ¬°Los decodificadores son esenciales para la selecci√≥n de memoria y multiplexaci√≥n!",
        "concepts": ["Decodificaci√≥n", "Comando Case", "Codificaci√≥n One-hot"]
      },
      "counter0to3": {
        "title": "Contador 0-3 con Enable",
        "description": "Contador de 2 bits (0‚Üí1‚Üí2‚Üí3‚Üí0) que solo cuenta cuando enable='1'.",
        "instructions": [
          "Crea una entidad 'counter_0to3' con reloj, reset, enable y salida count (2 bits)",
          "Usa process con rising_edge(clock) para l√≥gica s√≠ncrona",
          "Si reset='1': count <= '00'",
          "Si enable='1': incrementa count (usa numeric_std para conversi√≥n)"
        ],
        "hint": "Usa library IEEE.NUMERIC_STD.ALL; y convierte: count <= std_logic_vector(unsigned(count) + 1);",
        "successMessage": "¬°Excelente! ¬°Has dominado la l√≥gica secuencial con enable!",
        "concepts": ["L√≥gica secuencial", "Flanco de reloj", "Se√±al de Enable", "Conversiones num√©ricas"]
      }
    }
  },
  "tutorial": {
    "title": "Tutorial Paso a Paso: Decodificador BCD para 7 Segmentos",
    "subtitle": "Aprende a desarrollar el c√≥digo VHDL etapa por etapa con validaci√≥n en tiempo real",
    "progress": "Progreso",
    "stepsCompleted": "etapas completadas",
    "verify": "Verificar C√≥digo",
    "showHint": "Ver Pista",
    "hideHint": "Ocultar Pista",
    "previous": "Anterior",
    "next": "Siguiente",
    "finish": "Finalizar",
    "allCompleted": "¬°Felicidades! ¬°Has completado todas las etapas del tutorial!",
    "placeholder": "Escribe tu c√≥digo VHDL aqu√≠...",
    "feedback": {
      "error": "‚ùå ¬°Ups! El c√≥digo no es correcto todav√≠a. Revisa las instrucciones e int√©ntalo de nuevo. Haz clic en 'Ver Pista' si necesitas ayuda."
    },
    "steps": [
      {
        "title": "Paso 1: Declaraci√≥n de la Entidad",
        "description": "Vamos a empezar declarando la entidad para nuestro decodificador BCD para display de 7 segmentos.",
        "instruction": "Completa el c√≥digo declarando los puertos de entrada y salida. La entrada debe ser un vector de 4 bits (BCD) y la salida debe ser un vector de 7 bits (segmentos).",
        "hint": "Usa 'std_logic_vector' para vectores. Formato: (3 downto 0) para 4 bits y (6 downto 0) para 7 bits.",
        "successMessage": "‚úÖ ¬°Perfecto! Has declarado correctamente la entidad con los puertos de entrada y salida."
      },
      {
        "title": "Paso 2: Iniciando la Arquitectura",
        "description": "Ahora vamos a crear la arquitectura que implementa la l√≥gica del decodificador.",
        "instruction": "Declara la arquitectura 'behavioral' e inicia el proceso sensible a la se√±al 'entrada'.",
        "hint": "Usa 'architecture behavioral of bcd_7seg is' y despu√©s 'process(entrada)'.",
        "successMessage": "‚úÖ ¬°Excelente! La estructura de la arquitectura y del proceso es correcta."
      },
      {
        "title": "Paso 3: Estructura Case",
        "description": "Dentro del proceso, usaremos una estructura 'case' para mapear cada entrada BCD a los segmentos correspondientes.",
        "instruction": "A√±ade la estructura 'case' que analiza el valor 'entrada' y completa los 3 primeros n√∫meros (0, 1 y 2).",
        "hint": "Formato: case entrada is when \"0000\" => segmentos <= \"1111110\"; -- Para el n√∫mero 0",
        "successMessage": "‚úÖ ¬°Muy bien! Has mapeado correctamente los n√∫meros 0, 1 y 2. ¬°Sigue as√≠!"
      },
      {
        "title": "Paso 4: Completando los N√∫meros 3-6",
        "description": "Vamos a a√±adir m√°s n√∫meros a nuestro decodificador.",
        "instruction": "Completa el mapeo para los n√∫meros 3, 4, 5 y 6.",
        "hint": "3='1111001', 4='0110011', 5='1011011', 6='1011111'",
        "successMessage": "‚úÖ ¬°Fant√°stico! Faltan solo los √∫ltimos n√∫meros."
      },
      {
        "title": "Paso 5: Finalizando con 7, 8 y 9",
        "description": "¬°Etapa final! Vamos a completar el decodificador con los n√∫meros restantes.",
        "instruction": "Completa el mapeo para los n√∫meros 7, 8 y 9.",
        "hint": "7='1110000', 8='1111111', 9='1111011'",
        "successMessage": "üéâ ¬°Felicidades! ¬°Has completado el decodificador BCD para display de 7 segmentos!"
      }
    ]
  },
  "lab": {
    "title": "Laboratorio Interactivo VHDL",
    "subtitle": "Aprende a programar un decodificador BCD para display de 7 segmentos",
    "editor": "Editor de C√≥digo VHDL",
    "display": "Display de 7 Segmentos",
    "simulate": "Simular C√≥digo",
    "input": "Entrada Decimal",
    "binary": "Binario",
    "currentPattern": "Patr√≥n Actual",
    "segments": "Mapeo de Segmentos",
    "placeholder": "Escribe tu c√≥digo VHDL aqu√≠...",
    "instructions": "Instrucciones:",
    "instructionsList": [
      "Completa el c√≥digo VHDL de arriba con los patrones de segmentos",
      "Cada patr√≥n es una cadena de 7 bits: \"abcdefg\"",
      "1 = segmento encendido, 0 = segmento apagado",
      "Haz clic en \"Simular C√≥digo\" para probar tu implementaci√≥n",
      "Usa el control de la derecha para ver los n√∫meros en el display"
    ],
    "segmentLabels": {
      "a": "a = segmento superior",
      "b": "b = superior derecho",
      "c": "c = inferior derecho",
      "d": "d = segmento inferior",
      "e": "e = inferior izquierdo",
      "f": "f = superior izquierdo",
      "g": "g = segmento central"
    },
    "feedback": {
      "success": "‚úÖ ¬°C√≥digo analizado con √©xito! Mapeo extra√≠do. Prueba diferentes n√∫meros en el control de entrada.",
      "error": "Error al analizar el c√≥digo VHDL. Verifica la sintaxis de tu mapeo.",
      "incomplete": "Error: Mapeo incompleto. Aseg√∫rate de definir los patrones para todos los n√∫meros del 0 al 9."
    }
  },
  "glossary": {
    "title": "Glosario Interactivo VHDL",
    "subtitle": "Diccionario completo de t√©rminos, operadores y conceptos de VHDL con ejemplos pr√°cticos.",
    "search": "Buscar t√©rmino o concepto...",
    "termsFound": "t√©rmino(s) encontrado(s)",
    "noResults": "Ning√∫n t√©rmino encontrado. Intenta otro t√©rmino de b√∫squeda.",
    "example": "Ejemplo",
    "categoryCount": "t√©rminos",
    "categories": {
      "basic": "Conceptos B√°sicos",
      "advanced": "Conceptos Avanzados",
      "operator": "Operadores",
      "type": "Tipos de Datos"
    }
  },
  "gamification": {
    "title": "Logros y Progreso",
    "subtitle": "¬°Sigue tu viaje de aprendizaje y obt√©n insignias!",
    "overallProgress": "Tu Progreso General",
    "continueMessage": "¬°Sigue aprendiendo para desbloquear m√°s logros!",
    "totalPoints": "de {{total}} puntos totales",
    "totalBadges": "de {{total}} insignias",
    "completed": "completado",
    "earnedBadges": "Insignias Obtenidas ({{count}})",
    "nextAchievements": "Pr√≥ximos Logros ({{count}})",
    "unlocked": "¬°Obtenida!",
    "howToUnlock": "C√≥mo desbloquear:",
    "motivational": {
      "start": {
        "title": "¬°Comienza tu viaje!",
        "message": "¬°Completa tu primer ejercicio para ganar tu primera insignia!"
      },
      "progress": {
        "title": "¬°Gran progreso!",
        "message": "¬°Sigue as√≠ para desbloquear todas las {{total}} insignias!"
      },
      "master": {
        "title": "¬°Maestro VHDL! üéâ",
        "message": "¬°Felicidades! ¬°Has obtenido TODAS las insignias disponibles!"
      }
    },
    "badges": {
      "firstSteps": {
        "title": "Primeros Pasos",
        "description": "Completa tu primer ejercicio b√°sico",
        "requirement": "Completa 1 ejercicio b√°sico"
      },
      "logicMaster": {
        "title": "Maestro de la L√≥gica",
        "description": "Domina todas las puertas l√≥gicas b√°sicas",
        "requirement": "Completa todos los ejercicios de puertas l√≥gicas"
      },
      "quizChampion": {
        "title": "Campe√≥n del Cuestionario",
        "description": "Acierta 90% o m√°s en el cuestionario",
        "requirement": "Acierta 9/10 preguntas del cuestionario"
      },
      "arithmeticExpert": {
        "title": "Experto en Aritm√©tica",
        "description": "Completa todos los ejercicios de sumadores",
        "requirement": "Completa el Half Adder y Full Adder"
      },
      "sequentialWizard": {
        "title": "Mago Secuencial",
        "description": "Domina la l√≥gica secuencial y los contadores",
        "requirement": "Completa el ejercicio del contador"
      },
      "displayDecoder": {
        "title": "Decodificador de Display",
        "description": "Crea el decodificador BCD para 7 segmentos",
        "requirement": "Completa el tutorial de 7 segmentos"
      },
      "knowledgeSeeker": {
        "title": "Buscador de Conocimiento",
        "description": "Consulta el glosario 10 veces",
        "requirement": "Explora 10 t√©rminos del glosario"
      },
      "vhdlMaster": {
        "title": "Maestro VHDL",
        "description": "Completa TODOS los ejercicios disponibles",
        "requirement": "100% completado"
      }
    }
  },
  "resources": {
    "title": "Recursos",
    "subtitle": "Materiales complementarios para profundizar tus conocimientos",
    "documentation": {
      "title": "Documentaci√≥n",
      "items": {
        "ieee": "Est√°ndar IEEE VHDL",
        "tutorials": "Tutoriales en L√≠nea",
        "examples": "Ejemplos de C√≥digo"
      }
    },
    "tools": {
      "title": "Herramientas",
      "items": {
        "simulators": "Simuladores VHDL",
        "ides": "IDEs Recomendados",
        "fpga": "Herramientas FPGA"
      }
    },
    "community": {
      "title": "Comunidad",
      "items": {
        "forums": "Foros",
        "discord": "Discord",
        "github": "Proyectos en GitHub"
      }
    }
  },
  "about": {
    "title": "Acerca del Proyecto",
    "subtitle": "Nuestra misi√≥n es democratizar la ense√±anza de VHDL",
    "mission": {
      "title": "Misi√≥n",
      "text": "Hacer que el aprendizaje de VHDL sea accesible, interactivo y eficiente para estudiantes y profesionales de todo el mundo."
    },
    "vision": {
      "title": "Visi√≥n",
      "text": "Ser la principal plataforma educativa de VHDL, reconocida por la calidad del contenido y la experiencia de aprendizaje."
    },
    "values": {
      "title": "Valores",
      "items": {
        "quality": "Calidad del Contenido",
        "accessibility": "Accesibilidad",
        "innovation": "Innovaci√≥n Educativa",
        "community": "Comunidad Activa"
      }
    }
  },
  "contact": {
    "title": "Contacta con Nosotros",
    "subtitle": "Env√≠a tus dudas, sugerencias o feedback",
    "form": {
      "name": "Nombre",
      "email": "Correo Electr√≥nico",
      "message": "Mensaje",
      "submit": "Enviar Mensaje",
      "sending": "Enviando..."
    },
    "success": "¬°Mensaje enviado con √©xito!",
    "error": "Error al enviar el mensaje. Int√©ntalo de nuevo."
  },
  "footer": {
    "description": "Plataforma educativa para aprender VHDL de forma interactiva y pr√°ctica.",
    "links": {
      "title": "Enlaces √ötiles",
      "documentation": "Documentaci√≥n",
      "tutorials": "Tutoriales",
      "examples": "Ejemplos"
    },
    "support": {
      "title": "Soporte",
      "faq": "FAQ",
      "contact": "Contacto",
      "community": "Comunidad"
    },
    "rights": "Todos los derechos reservados."
  },
  "theme": {
    "light": "Claro",
    "dark": "Oscuro"
  }
}