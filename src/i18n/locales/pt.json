{
  "nav": {
    "home": "In√≠cio",
    "learning": "Aprendizado",
    "examples": "Exemplos",
    "resources": "Recursos",
    "about": "Sobre",
    "contact": "Contato"
  },
  "hero": {
    "title": "Aprenda VHDL",
    "subtitle": "Domine a linguagem de descri√ß√£o de hardware de forma intuitiva e pr√°tica",
    "description": "Do b√°sico aos conceitos avan√ßados, aprenda VHDL com exemplos reais e explica√ß√µes claras que tornam o hardware design acess√≠vel para todos.",
    "cta": {
      "start": "Come√ßar Agora",
      "examples": "Ver Exemplos"
    }
  },
  "learning": {
    "intro": {
      "title": "Introdu√ß√£o ao VHDL",
      "subtitle": "Comece sua jornada entendendo o que √© VHDL, sua origem e principais caracter√≠sticas"
    },
    "fundamentals": {
      "title": "Conceitos Fundamentais",
      "subtitle": "Domine os pilares do VHDL atrav√©s de explica√ß√µes claras e exemplos pr√°ticos"
    },
    "examples": {
      "title": "Exemplos Pr√°ticos",
      "subtitle": "C√≥digo VHDL real que voc√™ pode executar e modificar"
    },
    "concepts": {
      "whatIs": {
        "title": "O que √© VHDL?",
        "description": "VHDL (VHSIC Hardware Description Language) √© uma linguagem de descri√ß√£o de hardware usada para modelar sistemas eletr√¥nicos digitais."
      },
      "history": {
        "title": "Hist√≥ria",
        "description": "Desenvolvido nos anos 80 pelo Departamento de Defesa dos EUA, agora √© o padr√£o IEEE 1076."
      },
      "features": {
        "title": "Recursos",
        "description": "Fortemente tipado, suporta concorr√™ncia, permite simula√ß√£o e s√≠ntese de circuitos digitais."
      },
      "entities": {
        "title": "Entidades e Arquiteturas",
        "description": "A entidade define a interface (portas de entrada/sa√≠da) e a arquitetura descreve o comportamento interno do circuito."
      },
      "signals": {
        "title": "Sinais e Vari√°veis",
        "description": "Sinais representam conex√µes f√≠sicas entre componentes, enquanto vari√°veis s√£o usadas para c√°lculos tempor√°rios dentro de processos."
      },
      "processes": {
        "title": "Processos e Clock",
        "description": "Processos s√£o blocos sequenciais que executam quando sinais na lista de sensibilidade mudam, essenciais para l√≥gica s√≠ncrona."
      },
      "dataTypes": {
        "title": "Tipos de Dados",
        "description": "VHDL possui tipos nativos (std_logic, integer, boolean) e permite a cria√ß√£o de tipos personalizados para representar estados e estruturas."
      },
      "stateMachines": {
        "title": "M√°quinas de Estado",
        "description": "FSMs (Finite State Machines) s√£o fundamentais para controle sequencial, implementadas com processos e tipos enumerados."
      },
      "hierarchy": {
        "title": "Hierarquia e Componentes",
        "description": "Projetos complexos s√£o divididos em componentes menores, criando hierarquia modular e reutiliz√°vel."
      }
    }
  },
  "basicExercises": {
    "title": "Exerc√≠cios B√°sicos de VHDL",
    "subtitle": "Comece do zero! Aprenda os componentes fundamentais da l√≥gica digital.",
    "progress": "Progresso",
    "verify": "Verificar C√≥digo",
    "next": "Pr√≥ximo",
    "previous": "Anterior",
    "showHint": "Ver Dica",
    "hideHint": "Esconder Dica",
    "completed": "Parab√©ns! üéâ",
    "completedMessage": "Voc√™ completou todos os exerc√≠cios b√°sicos! Agora est√° pronto para desafios mais avan√ßados.",
    "instructions": "Instru√ß√µes",
    "truthTable": "Tabela Verdade",
    "inputs": "Entradas",
    "outputs": "Sa√≠da",
    "yourCode": "Seu c√≥digo VHDL:",
    "placeholder": "Digite seu c√≥digo VHDL aqui...",
    "exerciseOf": "Exerc√≠cio {{current}} de {{total}}",
    "hint": "Dica",
    "feedback": {
      "error": "O c√≥digo ainda n√£o est√° correto. Revise as instru√ß√µes e tente novamente."
    },
    "exercises": {
      "andGate": {
        "title": "Porta AND (E)",
        "description": "Crie uma porta l√≥gica AND de 2 entradas. A sa√≠da s√≥ √© '1' quando AMBAS as entradas s√£o '1'.",
        "instructions": [
          "Crie uma entidade chamada 'porta_and' com 2 entradas (a, b) e 1 sa√≠da (y)",
          "Use o operador 'and' para combinar as entradas: y <= a and b;"
        ],
        "hint": "A porta AND usa o operador 'and'. Lembre-se: entity nome is Port(...); end nome; depois architecture...",
        "successMessage": "Perfeito! Voc√™ criou sua primeira porta l√≥gica em VHDL!",
        "initialCode": "-- Complete o c√≥digo da porta AND\nentity porta_and is\n  Port (\n    -- Declare as entradas a, b\n    -- Declare a sa√≠da y\n  );\nend porta_and;\n\narchitecture behavioral of porta_and is\nbegin\n  -- Implemente: y <= a and b;\nend behavioral;"
      },
      "orGate": {
        "title": "Porta OR (OU)",
        "description": "Crie uma porta l√≥gica OR de 2 entradas. A sa√≠da √© '1' quando PELO MENOS UMA entrada √© '1'.",
        "instructions": [
          "Crie uma entidade chamada 'porta_or' com 2 entradas (a, b) e 1 sa√≠da (y)",
          "Use o operador 'or' para combinar as entradas"
        ],
        "hint": "Similar √† porta AND, mas use o operador 'or' ao inv√©s de 'and'.",
        "successMessage": "Excelente! A porta OR est√° funcionando corretamente!",
        "initialCode": "-- Complete o c√≥digo da porta OR\nentity porta_or is\n  Port (\n    a : in std_logic;\n    b : in std_logic;\n    -- Declare a sa√≠da y\n  );\nend porta_or;\n\narchitecture behavioral of porta_or is\nbegin\n  -- Implemente usando o operador 'or'\nend behavioral;"
      },
      "notGate": {
        "title": "Porta NOT (Inversor)",
        "description": "Crie uma porta l√≥gica NOT. A sa√≠da √© sempre o INVERSO da entrada.",
        "instructions": [
          "Crie uma entidade chamada 'porta_not' com 1 entrada (a) e 1 sa√≠da (y)",
          "Use o operador 'not' para inverter a entrada"
        ],
        "hint": "O operador NOT √© usado assim: y <= not a;",
        "successMessage": "√ìtimo trabalho! Voc√™ dominou o operador NOT!",
        "initialCode": "-- Complete o c√≥digo da porta NOT\nentity porta_not is\n  Port (\n    -- Declare a entrada e a sa√≠da\n  );\nend porta_not;\n\narchitecture behavioral of porta_not is\nbegin\n  -- Inverta a entrada\nend behavioral;"
      },
      "mux": {
        "title": "Multiplexador 2:1",
        "description": "Crie um multiplexador que seleciona entre 2 entradas baseado em um sinal de sele√ß√£o.",
        "instructions": [
          "Crie uma entidade com 2 entradas de dados (a, b), 1 seletor (sel) e 1 sa√≠da (y)",
          "Use uma express√£o condicional: y <= a when sel='0' else b;",
          "Quando sel=0, a sa√≠da y recebe 'a'. Quando sel=1, y recebe 'b'"
        ],
        "hint": "Use a estrutura: saida <= entrada1 when condicao else entrada2;",
        "successMessage": "Fant√°stico! Voc√™ criou um multiplexador funcional!",
        "initialCode": "-- Complete o c√≥digo do multiplexador 2:1\nentity mux_2to1 is\n  Port (\n    a   : in std_logic;\n    b   : in std_logic;\n    sel : in std_logic;\n    y   : out std_logic\n  );\nend mux_2to1;\n\narchitecture behavioral of mux_2to1 is\nbegin\n  -- Implemente a l√≥gica de sele√ß√£o\n  -- y <= a when sel='0' else b;\nend behavioral;"
      }
    }
  },
  "quiz": {
    "title": "Quiz Interativo de VHDL",
    "subtitle": "Teste seus conhecimentos com feedback imediato!",
    "progress": "Progresso",
    "score": "Pontua√ß√£o",
    "question": "Quest√£o",
    "of": "de",
    "verify": "Verificar Resposta",
    "next": "Pr√≥xima",
    "previous": "Anterior",
    "finish": "Ver Resultado",
    "restart": "Reiniciar Quiz",
    "completed": "Quiz Conclu√≠do! üéâ",
    "selectAnswer": "Selecione uma resposta",
    "selectPrompt": "Por favor, escolha uma op√ß√£o antes de verificar.",
    "resultMessage": "Voc√™ acertou {{percentage}}% das quest√µes!",
    "difficulty": {
      "easy": "F√°cil",
      "medium": "M√©dio",
      "hard": "Dif√≠cil"
    },
    "evaluation": {
      "excellent": "Excelente! Voc√™ domina VHDL! üåü",
      "veryGood": "Muito bom! Continue praticando! üëç",
      "good": "Bom come√ßo! Revise os conceitos. üìö",
      "keepGoing": "Continue estudando! Voc√™ vai conseguir! üí™"
    },
    "feedback": {
      "correct": "Correto! üéâ",
      "incorrect": "Incorreto",
      "explanation": "Avalia√ß√£o:"
    }
  },
  "intermediateExercises": {
    "title": "Exerc√≠cios Intermedi√°rios",
    "subtitle": "Circuitos aritm√©ticos e sequenciais para dominar VHDL.",
    "progress": "Progresso",
    "verify": "Verificar C√≥digo",
    "showHint": "Ver Dica",
    "hideHint": "Esconder Dica",
    "completed": "N√≠vel Intermedi√°rio Completo! üéâ",
    "completedMessage": "Voc√™ est√° dominando VHDL! Continue praticando com projetos mais avan√ßados.",
    "instructions": "Instru√ß√µes",
    "conceptsApplied": "Conceitos Aplicados",
    "yourCode": "Seu c√≥digo VHDL:",
    "placeholder": "Digite seu c√≥digo VHDL aqui...",
    "exerciseOf": "Exerc√≠cio {{current}} de {{total}}",
    "hint": "Dica",
    "next": "Pr√≥ximo",
    "previous": "Anterior",
    "feedback": {
      "error": "O c√≥digo ainda n√£o est√° completo. Revise as instru√ß√µes e tente novamente."
    },
    "exercises": {
      "halfAdder": {
        "title": "Half Adder (Meio Somador)",
        "description": "Circuito que soma dois bits, gerando a soma (S) e o 'vai-um' (carry out - C).",
        "instructions": [
          "Crie uma entidade 'half_adder' com entradas 'a' e 'b', sa√≠das 's' (soma) e 'c' (carry)",
          "A soma √©: s <= a xor b;",
          "O carry √©: c <= a and b;"
        ],
        "hint": "Use o operador XOR para a soma e AND para o carry. Lembre-se: 1+1 = 10 em bin√°rio (soma=0, carry=1).",
        "successMessage": "Excelente! O Half Adder √© a base para somadores mais complexos!",
        "concepts": ["Aritm√©tica bin√°ria", "Operador XOR", "Bit de carry"]
      },
      "fullAdder": {
        "title": "Full Adder (Somador Completo)",
        "description": "Soma tr√™s bits: a, b e carry_in, produzindo soma e carry_out. Base para somadores de m√∫ltiplos bits.",
        "instructions": [
          "Crie uma entidade 'full_adder' com entradas a, b, carry_in e sa√≠das s, carry_out",
          "Soma: s <= a xor b xor carry_in;",
          "Carry out: carry_out <= (a and b) or (carry_in and (a xor b));"
        ],
        "hint": "O Full Adder pode ser constru√≠do com dois Half Adders. A f√≥rmula do carry_out combina m√∫ltiplas condi√ß√µes com OR.",
        "successMessage": "Perfeito! Full Adders s√£o encadeados para criar somadores de 8, 16, 32 bits!",
        "concepts": ["Somadores em cascata", "Propaga√ß√£o de carry", "Circuitos aritm√©ticos"]
      },
      "decoder2to4": {
        "title": "Decodificador 2-para-4",
        "description": "Converte 2 bits de entrada em 4 sa√≠das, onde apenas uma sa√≠da √© '1' por vez.",
        "instructions": [
          "Crie uma entidade 'decoder_2to4' com entrada de 2 bits (sel) e sa√≠da de 4 bits (y)",
          "Use um process com case-when para mapear cada combina√ß√£o de entrada",
          "Quando sel='00', y='0001'; sel='01', y='0010'; sel='10', y='0100'; sel='11', y='1000'"
        ],
        "hint": "Use case sel is ... when '00' => y <= '0001'; ... end case; dentro de um process.",
        "successMessage": "√ìtimo! Decodificadores s√£o essenciais para sele√ß√£o de mem√≥ria e multiplexa√ß√£o!",
        "concepts": ["Decodifica√ß√£o", "Comando Case", "Codifica√ß√£o One-hot"]
      },
      "counter0to3": {
        "title": "Contador 0-3 com Enable",
        "description": "Contador de 2 bits (0‚Üí1‚Üí2‚Üí3‚Üí0) que s√≥ conta quando enable='1'.",
        "instructions": [
          "Crie uma entidade 'counter_0to3' com clock, reset, enable e sa√≠da count (2 bits)",
          "Use process com rising_edge(clock) para l√≥gica s√≠ncrona",
          "Se reset='1': count <= '00'",
          "Se enable='1': incrementa count (use numeric_std para convers√£o)"
        ],
        "hint": "Use library IEEE.NUMERIC_STD.ALL; e converta: count <= std_logic_vector(unsigned(count) + 1);",
        "successMessage": "Excelente! Voc√™ dominou a l√≥gica sequencial com enable!",
        "concepts": ["L√≥gica sequencial", "Borda de clock", "Sinal de Enable", "Convers√µes num√©ricas"]
      }
    }
  },
  "tutorial": {
    "title": "Tutorial Passo a Passo: Decodificador BCD para 7 Segmentos",
    "subtitle": "Aprenda a desenvolver o c√≥digo VHDL etapa por etapa com valida√ß√£o em tempo real",
    "progress": "Progresso",
    "stepsCompleted": "etapas conclu√≠das",
    "verify": "Verificar C√≥digo",
    "showHint": "Ver Dica",
    "hideHint": "Esconder Dica",
    "previous": "Anterior",
    "next": "Pr√≥ximo",
    "finish": "Finalizar",
    "allCompleted": "Parab√©ns! Voc√™ completou todas as etapas do tutorial!",
    "placeholder": "Digite seu c√≥digo VHDL aqui...",
    "feedback": {
      "error": "‚ùå Ops! O c√≥digo n√£o est√° correto ainda. Revise as instru√ß√µes e tente novamente. Clique em 'Ver Dica' se precisar de ajuda."
    },
    "steps": [
      {
        "title": "Passo 1: Declara√ß√£o da Entidade",
        "description": "Vamos come√ßar declarando a entidade para nosso decodificador BCD para display de 7 segmentos.",
        "instruction": "Complete o c√≥digo declarando as portas de entrada e sa√≠da. A entrada deve ser um vetor de 4 bits (BCD) e a sa√≠da deve ser um vetor de 7 bits (segmentos).",
        "hint": "Use 'std_logic_vector' para vetores. Formato: (3 downto 0) para 4 bits e (6 downto 0) para 7 bits.",
        "successMessage": "‚úÖ Perfeito! Voc√™ declarou corretamente a entidade com as portas de entrada e sa√≠da."
      },
      {
        "title": "Passo 2: Iniciando a Arquitetura",
        "description": "Agora vamos criar a arquitetura que implementa a l√≥gica do decodificador.",
        "instruction": "Declare a arquitetura 'behavioral' e inicie o processo sens√≠vel ao sinal 'entrada'.",
        "hint": "Use 'architecture behavioral of bcd_7seg is' e depois 'process(entrada)'.",
        "successMessage": "‚úÖ Excelente! A estrutura da arquitetura e do processo est√° correta."
      },
      {
        "title": "Passo 3: Estrutura Case",
        "description": "Dentro do processo, usaremos uma estrutura 'case' para mapear cada entrada BCD aos segmentos correspondentes.",
        "instruction": "Adicione a estrutura 'case' que analisa o valor 'entrada' e complete os 3 primeiros n√∫meros (0, 1 e 2).",
        "hint": "Formato: case entrada is when \"0000\" => segmentos <= \"1111110\"; -- Para o n√∫mero 0",
        "successMessage": "‚úÖ Muito bom! Voc√™ mapeou corretamente os n√∫meros 0, 1 e 2. Continue assim!"
      },
      {
        "title": "Passo 4: Completando os N√∫meros 3-6",
        "description": "Vamos adicionar mais n√∫meros ao nosso decodificador.",
        "instruction": "Complete o mapeamento para os n√∫meros 3, 4, 5 e 6.",
        "hint": "3='1111001', 4='0110011', 5='1011011', 6='1011111'",
        "successMessage": "‚úÖ Fant√°stico! Faltam apenas os √∫ltimos n√∫meros."
      },
      {
        "title": "Passo 5: Finalizando com 7, 8 e 9",
        "description": "Etapa final! Vamos completar o decodificador com os n√∫meros restantes.",
        "instruction": "Complete o mapeamento para os n√∫meros 7, 8 e 9.",
        "hint": "7='1110000', 8='1111111', 9='1111011'",
        "successMessage": "üéâ Parab√©ns! Voc√™ completou o decodificador BCD para display de 7 segmentos!"
      }
    ]
  },
  "lab": {
    "title": "Laborat√≥rio Interativo VHDL",
    "subtitle": "Aprenda a programar um decodificador BCD para display de 7 segmentos",
    "editor": "Editor de C√≥digo VHDL",
    "display": "Display de 7 Segmentos",
    "simulate": "Simular C√≥digo",
    "input": "Entrada Decimal",
    "binary": "Bin√°rio",
    "currentPattern": "Padr√£o Atual",
    "segments": "Mapeamento de Segmentos",
    "placeholder": "Digite seu VHDL c√≥digo aqui...",
    "instructions": "Instru√ß√µes:",
    "instructionsList": [
      "Complete o c√≥digo VHDL acima com os padr√µes de segmentos",
      "Cada padr√£o √© uma string de 7 bits: \"abcdefg\"",
      "1 = segmento aceso, 0 = segmento apagado",
      "Clique em \"Simular C√≥digo\" para testar sua implementa√ß√£o",
      "Use o controle √† direita para ver os n√∫meros no display"
    ],
    "segmentLabels": {
      "a": "a = segmento superior",
      "b": "b = superior direito",
      "c": "c = inferior direito",
      "d": "d = segmento inferior",
      "e": "e = inferior esquerdo",
      "f": "f = superior esquerdo",
      "g": "g = segmento central"
    },
    "feedback": {
      "success": "‚úÖ C√≥digo analisado com sucesso! Mapeamento extra√≠do. Teste diferentes n√∫meros no controle de entrada.",
      "error": "Erro ao analisar o c√≥digo VHDL. Verifique a sintaxe do seu mapeamento.",
      "incomplete": "Erro: Mapeamento incompleto. Certifique-se de definir os padr√µes para todos os n√∫meros de 0 a 9."
    }
  },
  "glossary": {
    "title": "Gloss√°rio Interativo VHDL",
    "subtitle": "Dicion√°rio completo de termos, operadores e conceitos de VHDL com exemplos pr√°ticos.",
    "search": "Buscar termo ou conceito...",
    "termsFound": "termo(s) encontrado(s)",
    "noResults": "Nenhum termo encontrado. Tente outro termo de busca.",
    "example": "Exemplo",
    "categoryCount": "termos",
    "categories": {
      "basic": "Conceitos B√°sicos",
      "advanced": "Conceitos Avan√ßados",
      "operator": "Operadores",
      "type": "Tipos de Dados"
    }
  },
  "gamification": {
    "title": "Conquistas e Progresso",
    "subtitle": "Acompanhe sua jornada de aprendizado e conquiste badges!",
    "overallProgress": "Seu Progresso Geral",
    "continueMessage": "Continue aprendendo para desbloquear mais conquistas!",
    "totalPoints": "de {{total}} pontos totais",
    "totalBadges": "de {{total}} badges",
    "completed": "conclu√≠do",
    "earnedBadges": "Badges Conquistadas ({{count}})",
    "nextAchievements": "Pr√≥ximas Conquistas ({{count}})",
    "unlocked": "Conquistada!",
    "howToUnlock": "Como desbloquear:",
    "motivational": {
      "start": {
        "title": "Comece sua jornada!",
        "message": "Complete seu primeiro exerc√≠cio para ganhar sua primeira badge!"
      },
      "progress": {
        "title": "√ìtimo progresso!",
        "message": "Continue assim para desbloquear todas as {{total}} badges!"
      },
      "master": {
        "title": "Mestre VHDL! üéâ",
        "message": "Parab√©ns! Voc√™ conquistou TODAS as badges dispon√≠veis!"
      }
    },
    "badges": {
      "firstSteps": {
        "title": "Primeiros Passos",
        "description": "Complete seu primeiro exerc√≠cio b√°sico",
        "requirement": "Complete 1 exerc√≠cio b√°sico"
      },
      "logicMaster": {
        "title": "Mestre da L√≥gica",
        "description": "Domine todas as portas l√≥gicas b√°sicas",
        "requirement": "Complete todos os exerc√≠cios de portas l√≥gicas"
      },
      "quizChampion": {
        "title": "Campe√£o do Quiz",
        "description": "Acerte 90% ou mais no quiz",
        "requirement": "Acerte 9/10 quest√µes do quiz"
      },
      "arithmeticExpert": {
        "title": "Especialista em Aritm√©tica",
        "description": "Complete todos os exerc√≠cios de somadores",
        "requirement": "Complete o Half Adder e Full Adder"
      },
      "sequentialWizard": {
        "title": "Mago Sequencial",
        "description": "Domine l√≥gica sequencial e contadores",
        "requirement": "Complete o exerc√≠cio do contador"
      },
      "displayDecoder": {
        "title": "Decodificador de Display",
        "description": "Crie o decodificador BCD para 7 segmentos",
        "requirement": "Complete o tutorial de 7 segmentos"
      },
      "knowledgeSeeker": {
        "title": "Buscador de Conhecimento",
        "description": "Consulte o gloss√°rio 10 vezes",
        "requirement": "Explore 10 termos do gloss√°rio"
      },
      "vhdlMaster": {
        "title": "Mestre VHDL",
        "description": "Complete TODOS os exerc√≠cios dispon√≠veis",
        "requirement": "100% de conclus√£o"
      }
    }
  },
  "resources": {
    "title": "Recursos",
    "subtitle": "Materiais complementares para aprofundar seus conhecimentos",
    "documentation": {
      "title": "Documenta√ß√£o",
      "items": {
        "ieee": "IEEE Standard VHDL",
        "tutorials": "Tutoriais Online",
        "examples": "Exemplos de C√≥digo"
      }
    },
    "tools": {
      "title": "Ferramentas",
      "items": {
        "simulators": "Simuladores VHDL",
        "ides": "IDEs Recomendadas",
        "fpga": "Ferramentas FPGA"
      }
    },
    "community": {
      "title": "Comunidade",
      "items": {
        "forums": "F√≥runs",
        "discord": "Discord",
        "github": "Projetos GitHub"
      }
    }
  },
  "about": {
    "title": "Sobre o Projeto",
    "subtitle": "Nossa miss√£o √© democratizar o ensino de VHDL",
    "mission": {
      "title": "Miss√£o",
      "text": "Tornar o aprendizado de VHDL acess√≠vel, interativo e eficiente para estudantes e profissionais em todo o mundo."
    },
    "vision": {
      "title": "Vis√£o",
      "text": "Ser a principal plataforma educacional de VHDL, reconhecida pela qualidade do conte√∫do e pela experi√™ncia de aprendizado."
    },
    "values": {
      "title": "Valores",
      "items": {
        "quality": "Qualidade do Conte√∫do",
        "accessibility": "Acessibilidade",
        "innovation": "Inova√ß√£o Educacional",
        "community": "Comunidade Ativa"
      }
    }
  },
  "contact": {
    "title": "Entre em Contato",
    "subtitle": "Envie suas d√∫vidas, sugest√µes ou feedback",
    "form": {
      "name": "Nome",
      "email": "E-mail",
      "message": "Mensagem",
      "submit": "Enviar Mensagem",
      "sending": "Enviando..."
    },
    "success": "Mensagem enviada com sucesso!",
    "error": "Erro ao enviar mensagem. Tente novamente."
  },
  "footer": {
    "description": "Plataforma educacional para aprender VHDL de forma interativa e pr√°tica.",
    "links": {
      "title": "Links √öteis",
      "documentation": "Documenta√ß√£o",
      "tutorials": "Tutoriais",
      "examples": "Exemplos"
    },
    "support": {
      "title": "Suporte",
      "faq": "FAQ",
      "contact": "Contato",
      "community": "Comunidade"
    },
    "rights": "Todos os direitos reservados."
  },
  "theme": {
    "light": "Claro",
    "dark": "Escuro"
  }
}